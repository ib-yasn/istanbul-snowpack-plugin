// my-snowpack-plugin.js
// Example: a basic Snowpack plugin file, customize the name of the file and the value of the name in the object
// snowpackConfig = The Snowpack configuration object
// pluginOptions = user-provided configuration options
const istanbul = require('istanbul-lib-instrument');
const { createFilter } = require('@rollup/pluginutils');
const { extname } = require('path');

function makeFilter(opts, extensions) {
    const filter = createFilter(opts.include, opts.exclude);

    extensions = opts.extensions || extensions;
    if (!extensions || extensions === '*') {
        return filter;
    }

    if (!Array.isArray(extensions)) {
        extensions = [extensions];
    }
    extensions = extensions.map(e => (e[0] !== '.' ? `.${e}` : e));

    return id => filter(id) && extensions.indexOf(extname(id)) > -1;
}

module.exports = function (snowpackConfig, pluginOptions) {
    const filter = makeFilter(pluginOptions, ['.js']),
    opts = Object.assign(
      { esModules: true, compact: pluginOptions.compact !== false },
      pluginOptions.instrumenterConfig,
      { produceSourceMap: pluginOptions.sourceMap !== false }
    ),
    instrumenter = new (pluginOptions.instrumenter || istanbul).createInstrumenter(opts);
    
    return {
        name: 'istanbul-snowpack-plugin',
        async transform({ id, contents, isDev, fileExt }) {
            console.log(filter(id));
            if (!filter(id)) return;

            // TODO require the inputSourceMap that generated by the previous plugins
            code = instrumenter.instrumentSync(contents, id);

            return code;
        },
    };
};